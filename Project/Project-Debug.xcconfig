#include "Project.xcconfig"

// Code Signing Identity
// The name, also known as the common name, of a valid code-signing certificate in a keychain within your keychain path.
CODE_SIGN_IDENTITY = iPhone Developer

// Debug Information Format
DEBUG_INFORMATION_FORMAT = dwarf

// Enable Foundation Assertions
// Controls whether assertion logic provided by NSAssert is included in the preprocessed source code or is elided during preprocessing. Disabling assertions can improve code performance.
ENABLE_NS_ASSERTIONS = YES

// Enable Testability
// When this setting is activated, the product will be built with options appropriate for running automated tests, such as making private interfaces accessible to the tests. This may result in tests running slower than they would without testability enabled.
ENABLE_TESTABILITY = YES

// Optimization Level
// None: Do not optimize. -O0
// With this setting, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results. Statements are independentâ€”if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you would expect from the source code.
GCC_OPTIMIZATION_LEVEL = 0

// Preprocessor Macros
GCC_PREPROCESSOR_DEFINITIONS = DEBUG=1 $(inherited)

// Build Active Architecture Only
ONLY_ACTIVE_ARCH = YES

// Active Compilation Conditions
SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG

// Optimization Level
// None: Compile without any optimization. -Onone
SWIFT_OPTIMIZATION_LEVEL = -Onone

// Validate Built Product
// If enabled, perform validation checks on the product as part of the build process.
VALIDATE_PRODUCT = NO
