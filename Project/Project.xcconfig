// Always Search User Paths (Deprecated)
// NOTICE: This setting is deprecated as of Xcode 8.3 and may not be supported in future versions. It is recommended that you disable the setting.
ALWAYS_SEARCH_USER_PATHS = NO

// Architectures
// A list of the architectures for which the product will be built. This is usually set to a predefined build setting provided by the platform. If more than one architecture is specified, a universal binary will be produced.
ARCHS = $(ARCHS_STANDARD)

// Misuse of 'nonnull'
// Check for misuses of nonnull parameter and return types.
CLANG_ANALYZER_NONNULL = YES
CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE

// C++ Language Dialect
CLANG_CXX_LANGUAGE_STANDARD = gnu++0x

// C++ Standard Library
// libstdc++: A traditional C++ standard library that works with GCC and the LLVM Compiler (default).
// libc++: A highly optimized C++ standard library that works only with the LLVM Compiler, and is designed to support new C++11 features.
CLANG_CXX_LIBRARY = libc++

// Enable Modules (C and Objective-C)
// Enables the use of modules for system APIs. System headers are imported as semantic modules instead of raw headers. This can result in faster builds and project indexing.
CLANG_ENABLE_MODULES = YES

// Objective-C Automatic Reference Counting
CLANG_ENABLE_OBJC_ARC = YES

// Duplicate Method Definitions
// Warn about declaring the same method more than once within the same @interface.
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES

// Implicit Boolean Conversions
CLANG_WARN_BOOL_CONVERSION = YES

// Implicit Constant Conversions
CLANG_WARN_CONSTANT_CONVERSION = YES

// Direct usage of 'isa'
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR

// Documentation Comments
// Warns about issues in documentation comments (doxygen-style) such as missing or incorrect documentation tags.
CLANG_WARN_DOCUMENTATION_COMMENTS = YES

// Empty Loop Bodies
CLANG_WARN_EMPTY_BODY = YES

// Implicit Enum Conversions
CLANG_WARN_ENUM_CONVERSION = YES

// Infinite Recursion
// Warn if all paths through a function call itself.
CLANG_WARN_INFINITE_RECURSION = YES

// Implicit Integer to Pointer Conversions
CLANG_WARN_INT_CONVERSION = YES

// Unintentional Root Class
// Warn about classes that unintentionally do not subclass a root class, such as NSObject.
CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR

// Suspicious Moves
// Warn about suspicious uses of std::move.
CLANG_WARN_SUSPICIOUS_MOVE = YES

// Unreachable Code
CLANG_WARN_UNREACHABLE_CODE = YES

// Strip Debug Symbols During Copy
// Specifies whether binary files that are copied during the build, such as in a Copy Bundle Resources or Copy Files build phase, should be stripped of debugging symbols. It does not cause the linked product of a target to be strippedâ€”use Strip Linked Product (STRIP_INSTALLED_PRODUCT) for that.
COPY_PHASE_STRIP = NO

// Enable Strict Checking of objc_msgSend Calls
ENABLE_STRICT_OBJC_MSGSEND = YES

// C Language Dialect
GCC_C_LANGUAGE_STANDARD = gnu99

// Generate Position-Dependent Code
// Faster function calls for applications. Not appropriate for shared libraries, which need to be position-independent.
GCC_DYNAMIC_NO_PIC = NO

// No Common Blocks
// In C, allocate even uninitialized global variables in the data section of the object file, rather than generating them as common blocks. This has the effect that if the same variable is declared (without extern) in two different compilations, you will get an error when you link them.
GCC_NO_COMMON_BLOCKS = YES

// Implicit Conversion to 32 Bit Type
GCC_WARN_64_TO_32_BIT_CONVERSION = YES

// Mismatched Return Type
GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR

// Undeclared Selector
GCC_WARN_UNDECLARED_SELECTOR = YES

// Uninitialized Variables
GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE

// Unused Functions
// Warn whenever a static function is declared but not defined or a noninline static function is unused.
GCC_WARN_UNUSED_FUNCTION = YES

// Unused Variables
GCC_WARN_UNUSED_VARIABLE = YES
SWIFT_VERSION = 3.0

// Versioning Name Prefix
// Used as a prefix for the name of the version info symbol in the generated versioning source file. If you prefix your exported symbols you will probably want to set this to the same prefix.
VERSION_INFO_PREFIX =
