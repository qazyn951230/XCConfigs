// Code Signing Identity
// The name, also known as the common name, of a valid code-signing certificate in a keychain within your keychain path.
CODE_SIGN_IDENTITY =

// Current Project Version
// This setting defines the current version of the project. The value must be a integer or floating point number, such as 57 or 365.8.
CURRENT_PROJECT_VERSION = 1

// Defines Module
// If enabled, the product will be treated as defining its own module. This enables automatic production of LLVM module map files when appropriate, and allows the product to be imported as a module.
DEFINES_MODULE = YES

// Development Team
// The team ID of a development team to use for signing certificates and provisioning profiles.
DEVELOPMENT_TEAM =

// Compatibility Version
// Determines the compatibility version of the resulting library, bundle, or framework binary.
DYLIB_COMPATIBILITY_VERSION = 1

// Current Library Version
// his setting defines the current version of any framework built by the project.
DYLIB_CURRENT_VERSION = 1

// Dynamic Library Install Name Base
// Sets the base value for the internal "install path" (LC_ID_DYLIB) in a dynamic library.
DYLIB_INSTALL_NAME_BASE = @rpath

// Treat Warnings as Errors
GCC_TREAT_WARNINGS_AS_ERRORS = YES

// Installation Directory
// The directory in which to install the build products. This path is prepended by the Installation Build Products Location (DSTROOT).
INSTALL_PATH = $(LOCAL_LIBRARY_DIR)/Frameworks

// Product Name
// This is the basename of the product generated by the target.
PRODUCT_NAME = $(TARGET_NAME)

// Provisioning Profile
// Must contain a profile name or UUID. A missing or invalid profile will cause a build error.
PROVISIONING_PROFILE_SPECIFIER =

// Skip Install
// If enabled, don't install built products even if deployment locations are active.
SKIP_INSTALL = YES

// Treat Warnings as Errors
SWIFT_TREAT_WARNINGS_AS_ERRORS = YES

// Versioning System
// Apple Generic: Use the current project version setting. apple-generic
VERSIONING_SYSTEM = apple-generic
